<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevOps on Xiaoyun Yang</title>
    <link>https://xiaoyunyang.github.io/tags/devops/</link>
    <description>Recent content in DevOps on Xiaoyun Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>xiaoyun@looseleafapp.com (Xiaoyun Yang)</managingEditor>
    <webMaster>xiaoyun@looseleafapp.com (Xiaoyun Yang)</webMaster>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xiaoyunyang.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to Set Up Static Code Analysis For Your Project</title>
      <link>https://xiaoyunyang.github.io/post/how-to-set-up-static-code-analysis-for-your-project/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/how-to-set-up-static-code-analysis-for-your-project/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://xiaoyunyang.github.io/post/images/sonarqube/cover-static-analysis.png&#34; alt=&#34;Static code analysis&#34;&gt;&lt;/p&gt;
&lt;p&gt;Static code analysis is a method for identifying bugs and other quality issues in the program by examining the source code without actually running it. This is achieved by scanning the codebase and tracing code paths to find common code smells, potential bugs, tech debt (e.g., duplicate code), unit test coverage, and code logic complexity. Static code analysis can be done manually but there are many static code analyzer tools to automate this. We&amp;rsquo;ll look at one of these tools, &lt;a href=&#34;https://www.sonarqube.org/&#34;&gt;SonarQube&lt;/a&gt;, and walk through the process of setting it up locally and adding a static code analysis step to the Continuous Integration/Continuous Delivery (CI/CD) process for your projects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Complete Guide To Deploying Your Web App To Amazon Web Service</title>
      <link>https://xiaoyunyang.github.io/post/a-complete-guide-to-deploying-your-web-app-to-amazon-web-service/</link>
      <pubDate>Wed, 03 Oct 2018 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/a-complete-guide-to-deploying-your-web-app-to-amazon-web-service/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://xiaoyunyang.github.io/post/images/deployapp/ecs-docker.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This a comprehensive guide for how to containerize your Mongo-Express-React-Node (MERN) app with Docker and deploy it to Amazon Web Service (AWS) Elastic Container Service (ECS). I will share my research and lessons learned deploying a MERN app, including what worked, what didn&amp;rsquo;t work, how I prepared the app for deployment and accomplished the deployment.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
