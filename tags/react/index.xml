<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Xiaoyun Yang</title>
    <link>https://xiaoyunyang.github.io/tags/react/</link>
    <description>Recent content in React on Xiaoyun Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>xiaoyun@looseleafapp.com (Xiaoyun Yang)</managingEditor>
    <webMaster>xiaoyun@looseleafapp.com (Xiaoyun Yang)</webMaster>
    <lastBuildDate>Mon, 21 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xiaoyunyang.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Design Behind OkCupid&#39;s Offline-first Chat App</title>
      <link>https://xiaoyunyang.github.io/post/the-design-behind-okcupids-offline-first-chat-app/</link>
      <pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/the-design-behind-okcupids-offline-first-chat-app/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The chat app is a table-stakes feature for any dating app. A responsive and reliable messaging experience encourages users to stay on the platform for communications. This is desirable from a trust and safety standpoint, as abusive messages produced on the platform can be effectively moderated and proper actions can be promptly taken.&lt;/p&gt;
&lt;p&gt;In this article, we will explore the design of an offline-first chat app on the OkCupid website, in particular, how we achieved responsiveness by implementing optimistic UI design patterns and reliability by incorporating a messages cache to support offline-mode.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web Developer Playbook: Optimistic UI</title>
      <link>https://xiaoyunyang.github.io/post/web-developer-playbook-optimistic-ui/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/web-developer-playbook-optimistic-ui/</guid>
      <description>&lt;p&gt;In classic implementations of a CRUD app, the client app makes a request to the server and only updates its display state if the server responds to the request. However, in many modern applications like chat apps and note taking apps, users expect the display state to immediately update after they initiate an action.&lt;/p&gt;
&lt;p&gt;Quick response time from the server is not always achievable, especially when the user is on a slow network on a mobile device.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modeling UI State Using A Finite State Machine</title>
      <link>https://xiaoyunyang.github.io/post/modeling-ui-state-using-a-finite-state-machine/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/modeling-ui-state-using-a-finite-state-machine/</guid>
      <description>&lt;p&gt;A finite state machine (FSM) is an architectural design pattern that allows us to model a large system as a collection of loosely coupled components. Each component in the system changes its behavior when the internal state changes. This pattern allows us to write flexible, reusable, and testable code. In this article, we will explore the use of FSM in building complex React components.&lt;/p&gt;
&lt;p&gt;The primary use of FSM has been in &lt;a href=&#34;https://www.embedded.com/programming-embedded-systems-the-easy-way-with-state-machines/&#34;&gt;programming embedded systems&lt;/a&gt; but in recent years, there has been an emergence of FSM in other applications like &lt;a href=&#34;https://www.smashingmagazine.com/2018/01/rise-state-machines/&#34;&gt;managing states in the browser&lt;/a&gt;, &lt;a href=&#34;https://mind-simulation.com/en/blog/tech/using-finite-state-machines-to-model-behavior.html&#34;&gt;modeling behavior&lt;/a&gt;, and &lt;a href=&#34;https://www.hamidadelyar.com/blog/finite-state-machine-chatbot/&#34;&gt;building chatbots&lt;/a&gt;. The goal of this post is not to evangelize FSM as a better state management solution than its alternatives like &lt;a href=&#34;http://redux.js.org/&#34;&gt;Redux&lt;/a&gt; but rather, to introduce a pattern for simplifying the architecture of a system and write robust code that is understandable, extendable, and &lt;a href=&#34;https://programmingisterrible.com/post/139222674273/how-to-write-disposable-code-in-large-systems&#34;&gt;delete-able&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web Developer Playbook: Rich Text Editor</title>
      <link>https://xiaoyunyang.github.io/post/web-developer-playbook-rich-text-editor/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/web-developer-playbook-rich-text-editor/</guid>
      <description>&lt;p&gt;In this article, I will show you add a rich text editor based on &lt;a href=&#34;https://draftjs.org/&#34;&gt;Draft.js&lt;/a&gt; to your web app. This post is part of the Web Developer Playbook series, created to provide examples, best practice, and suggestions for designing and building web services. I will be using libraries from the JavaScript ecosystem (e.g., Node.js, React.js) in all my examples.
&lt;img src=&#34;https://xiaoyunyang.github.io/post/images/projects/draftjs.png&#34; alt=&#34;draftjs&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get started!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Single Page Application For Work</title>
      <link>https://xiaoyunyang.github.io/post/single-page-application-for-work/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/single-page-application-for-work/</guid>
      <description>&lt;p&gt;When I work at my federal job on a close intranet network, we often had to access information from different databases and filesystems through custom or share point websites which did not have the best user interface. It was a pain point for me and many of my colleagues. I decided to make a set of single page applications (SPAs) with nicer UX for querying the databases and file systems.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating LooseLeaf: A Platform To Support The Future Of Work</title>
      <link>https://xiaoyunyang.github.io/post/creating-looseleaf-a-platform-to-support-the-future-of-work/</link>
      <pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/creating-looseleaf-a-platform-to-support-the-future-of-work/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://looseleafapp.com&#34;&gt;LooseLeaf&lt;/a&gt; is a passion project and a startup I&amp;rsquo;ve been building while serving a 5 year commitment in the military. I&amp;rsquo;ve been creating prototypes and iterating on the concept of LooseLeaf since 2015.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building an Isomorphic Webapp</title>
      <link>https://xiaoyunyang.github.io/post/building-an-isomorphic-webapp/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/building-an-isomorphic-webapp/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve always lived by the &amp;ldquo;Separation of Concern&amp;rdquo; principle when it comes to software design.  Recently, I&amp;rsquo;ve came to love a new design pattern for web apps called the isomorphic web app that sacrifices some of the simplicity of a SPA with a backend API for a significant boost in performance.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Best Practices For State Management With React And Redux</title>
      <link>https://xiaoyunyang.github.io/post/best-practices-for-state-management-with-react-and-redux/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      <author>xiaoyun@looseleafapp.com (Xiaoyun Yang)</author>
      <guid>https://xiaoyunyang.github.io/post/best-practices-for-state-management-with-react-and-redux/</guid>
      <description>&lt;p&gt;In this post, I&amp;rsquo;ll share some best practices, tips, and practical examples for managing states and data in a frontend applications. Although the examples are targeted at frontend developers working with React and Redux, the best practices discussion are applicable for frontend developers working with any framework.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
